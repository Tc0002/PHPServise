name: Local CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # 手動実行を許可

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: pdo_pgsql, pgsql, mbstring, exif, pcntl, bcmath, gd, zip, intl, opcache, xml, xsl, soap, redis, curl, json, openssl
          ini-values: memory_limit=256M, max_execution_time=180
          tools: composer:v2

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Composer dependencies
        run: composer install --prefer-dist --optimize-autoloader

      - name: Set up test environment
        run: |
          cp .env.example .env
          php artisan key:generate
          echo "APP_ENV=testing" >> .env
          echo "APP_DEBUG=true" >> .env
          echo "DB_CONNECTION=sqlite" >> .env
          echo "DB_DATABASE=:memory:" >> .env
          echo "CACHE_DRIVER=array" >> .env
          echo "SESSION_DRIVER=array" >> .env
          echo "QUEUE_CONNECTION=sync" >> .env
          mkdir -p database
          touch database/database.sqlite

      - name: Clear Laravel caches
        run: |
          php artisan config:clear || echo "Config cache clear failed, continuing..."
          php artisan cache:clear || echo "Cache clear failed, continuing..."
          php artisan route:clear || echo "Route cache clear failed, continuing..."
          php artisan view:clear || echo "View cache clear failed, continuing..."

      - name: Check for package-lock.json
        run: |
          if [ -f "package-lock.json" ]; then
            echo "package-lock.json found, using npm ci"
            npm ci
          else
            echo "package-lock.json not found, using npm install"
            npm install
          fi

      - name: Run PHPUnit tests
        run: |
          echo "Current APP_KEY: $(grep APP_KEY .env | cut -d '=' -f2)"
          if php artisan test; then
            echo "Tests passed using artisan test"
          else
            echo "Falling back to direct PHPUnit execution"
            ./vendor/bin/phpunit --configuration=phpunit.xml
          fi

      - name: Run PHP CodeSniffer
        run: vendor/bin/phpcs --standard=PSR12 app/

      - name: Run PHPStan (Level 0 - Basic checks only)
        run: vendor/bin/phpstan analyse --level 0 app/ || echo "PHPStan completed with warnings, continuing..."

      - name: Build frontend assets
        run: |
          if [ -f "package.json" ] && [ -f "vite.config.js" ]; then
            echo "Building frontend assets with Vite..."
            npm run build || echo "Frontend build failed, continuing with pipeline..."
          else
            echo "Frontend build configuration not found, skipping..."
          fi

      - name: Build Docker images
        run: |
          echo "Building Laravel application Docker image..."
          docker build -t laravel-app:latest -f app/Dockerfile . || echo "Laravel app build failed, continuing..."
          
          echo "Building file-processor Docker image..."
          docker build -t file-processor:latest -f services/file-processor/Dockerfile services/file-processor/ || echo "File processor build failed, continuing..."
          
          echo "Building search-indexer Docker image..."
          docker build -t search-indexer:latest -f services/search-indexer/Dockerfile services/search-indexer/ || echo "Search indexer build failed, continuing..."
          
          echo "Docker build completed. Available images:"
          docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

      - name: Save Docker images
        run: |
          mkdir -p ./docker-images
          
          # Check if images exist before saving
          if docker image inspect laravel-app:latest >/dev/null 2>&1; then
            echo "Saving laravel-app:latest..."
            docker save -o ./docker-images/laravel-app.tar laravel-app:latest
          else
            echo "laravel-app:latest not found, skipping..."
          fi
          
          if docker image inspect file-processor:latest >/dev/null 2>&1; then
            echo "Saving file-processor:latest..."
            docker save -o ./docker-images/file-processor.tar file-processor:latest
          else
            echo "file-processor:latest not found, skipping..."
          fi
          
          if docker image inspect search-indexer:latest >/dev/null 2>&1; then
            echo "Saving search-indexer:latest..."
            docker save -o ./docker-images/search-indexer.tar search-indexer:latest
          else
            echo "search-indexer:latest not found, skipping..."
          fi
          
          # List available images for debugging
          echo "Available Docker images:"
          docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

      - name: Upload Docker images as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: ./docker-images
          if-no-files-found: warn

  local-deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Check build status
        run: |
          echo "=== Build and Test Job Status ==="
          echo "This job depends on build-and-test job completion"
          echo "If Docker images are missing, check the previous job logs"
          echo "================================================"
      
      - name: Download Docker images artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: ./docker-images
          if-no-files-found: warn

      - name: Load Docker images
        run: |
          echo "Checking available Docker image files..."
          ls -la ./docker-images/ || echo "No docker-images directory found"
          
          if [ -f "./docker-images/laravel-app.tar" ]; then
            echo "Loading laravel-app.tar..."
            docker load -i ./docker-images/laravel-app.tar
          else
            echo "laravel-app.tar not found, skipping..."
          fi
          
          if [ -f "./docker-images/file-processor.tar" ]; then
            echo "Loading file-processor.tar..."
            docker load -i ./docker-images/file-processor.tar
          else
            echo "file-processor.tar not found, skipping..."
          fi
          
          if [ -f "./docker-images/search-indexer.tar" ]; then
            echo "Loading search-indexer.tar..."
            docker load -i ./docker-images/search-indexer.tar
          else
            echo "search-indexer.tar not found, skipping..."
          fi
          
          echo "Available Docker images after loading:"
          docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

      - name: Local Deployment Instructions
        run: |
          echo "=== ローカルデプロイ手順 ==="
          echo "1. Dockerイメージのダウンロード完了"
          echo "2. ローカル環境での実行手順:"
          echo "   cd /path/to/your/local/project"
          echo "   docker load -i laravel-app.tar"
          echo "   docker load -i file-processor.tar"
          echo "   docker load -i search-indexer.tar"
          echo "   docker-compose up -d"
          echo ""
          echo "3. または、Docker Swarmを使用:"
          echo "   docker stack deploy -c swarm/docker-compose.yml laravel-system"
